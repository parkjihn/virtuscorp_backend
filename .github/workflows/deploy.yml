name: Deploy VirtusCorp

on:
  pull_request:
    types:
      - closed
    branches:
      - main  # Деплой запускается при закрытии Pull Request в main

jobs:
  build_and_push:
    if: github.event.pull_request.merged == true  # Запускать только если PR был успешно слит
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker Image
        run: |
          # Собираем образ из каталога с вашим Dockerfile (например, ./virtuscorp_tst)
          docker build -t virtuscorp_backend:latest ./virtuscorp_backend
          # Тегируем образ для Docker Hub
          docker tag virtuscorp_backend:latest ${{ secrets.DOCKER_USERNAME }}/virtuscorp_backend:latest
          # Отправляем образ в Docker Hub
          docker push ${{ secrets.DOCKER_USERNAME }}/virtuscorp_backend:latest

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy on Server
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -e  # Прерываем выполнение при ошибках
            # Логинимся в Docker Hub на сервере
            docker login -u "${{ secrets.DOCKER_USERNAME }}" --password "${{ secrets.DOCKER_PASSWORD }}"
            # Переходим в каталог с docker-compose файлом
            cd /home/deploy/www
            # Обновляем (или создаем) стек Swarm, используя docker stack deploy
            docker stack deploy -c docker-compose.yml virtuscorp_stack
            # Очистка неиспользуемых образов (по желанию)
            docker system prune -af
          EOF
